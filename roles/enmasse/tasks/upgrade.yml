---
- debug: msg="Using EnMasse git URL - {{ enmasse_git_url }}"

- name: "Retrieve EnMasse {{ enmasse_version }} artifact"
  git:
    repo: "{{ enmasse_git_url }}"
    dest: /tmp/enmasse-{{ enmasse_version }}
    version: "{{ enmasse_version }}"
    force: true

- name: Ensure tmp dir exists
  file:
    path: /tmp/enmasse-{{ enmasse_version }}
    state: directory

- set_fact:
    enmasse_playbook_location: enmasse-"{{ enmasse_version }}"/templates/ansible/playbooks/openshift/deploy_all.yml
    enmasse_inventory_path: /tmp/enmasse-{{ enmasse_version }}/templates/ansible/inventory/

- name: Generate EnMasse inventory hosts file
  template:
    src: enmasse_hosts.j2
    dest: "{{ enmasse_inventory_path }}/hosts"

  #hack to work around oc new-app failing when a ns begins with openshift- the ns will begin with openshift- in OSD so that it is hidden from the end user
- name: Adjust project check role when using openshift prefix
  template:
    src: "project_task.yml"
    dest: /tmp/enmasse-{{ enmasse_version }}/templates/ansible/roles/project/tasks/main.yml
    force: yes
  when: ns_prefix != ""

- name: "Provision EnMasse {{ enmasse_version }}"
  shell: ansible-playbook -i {{ enmasse_inventory_path }}/hosts /tmp/{{enmasse_playbook_location}}
  args:
    chdir: "../"

- name: Clean up EnMasse artifacts
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /tmp/enmasse-{{ enmasse_version }}.tgz
    - /tmp/enmasse-{{ enmasse_version }}.zip
    - /tmp/enmasse-{{ enmasse_version }}
  when: enmasse_clean_artifacts

- set_fact:
    enmasse_rest_route: "{{ hostvars['EVAL_VARS']['openshift_master_url'] }}/apis/enmasse.io"
      - name: Retrieve secret for webapp manifest
        shell: oc get secret manifest -n {{ eval_webapp_namespace }} -o jsonpath="{$.data.generated_manifest}"
        register: webapp_secret
        failed_when: webapp_secret.stderr != ""

- set_fact:
    webapp_manifest: "{{ webapp_secret.stdout | b64decode }}"
    new_manifest:
      components: []
    new_enmasse:
      name: "enmasse"
      version: "1.1.0.GA"
      host: "{{enmasse_rest_route}}"

- name: "remove old enmasse from new manifest"
  set_fact:
    new_manifest:
      components: "{{ new_manifest.components + [item] }}"
  with_items: "{{webapp_manifest.components}}"
  when: item.name != "enmasse"

- name: "add new enmasse to new manifest"
  set_fact:
    new_manifest:
      components: "{{ new_manifest.components + [new_enmasse]}}"

- name: "update web app secret"
  shell: oc create secret generic manifest -n {{ eval_webapp_namespace }} --from-literal=components="{{new_manifest.components | to_json}}" --dry-run -o yaml | oc replace -n {{ eval_webapp_namespace }} -f -


- name: "Verify EnMasse deployment succeeded"
  shell: sleep 5; oc get pods --namespace {{ enmasse_namespace }}  |  grep  "deploy"
  register: result
  until: not result.stdout
  retries: 50
  delay: 10
  failed_when: result.stdout
  changed_when: False

- name: "redeploy tutorial-web-app"
  shell: "oc rollout latest dc/tutorial-web-app -n {{ eval_webapp_namespace }}"