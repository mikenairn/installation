---
- name: "Create 3scale namespace: {{ threescale_namespace }}"
  include_role:
    name: namespace
  vars:
    namespace: "{{ threescale_namespace }}"
    display_name: "{{ threescale_display_name }}"

- name: Check namespace for existing resources
  shell: oc get all -n {{ threescale_namespace }}
  register: threescale_resources_exist

#- name: Add labels to namespace
#  shell: oc patch ns {{ threescale_namespace }} --patch '{"metadata":{"labels":{"{{ monitoring_label_name }}":"{{ monitoring_label_value }}", "integreatly-middleware-service":"true"}}}'
#  register: namespace_patch
#  failed_when: namespace_patch.stderr != '' and 'not patched' not in namespace_patch.stderr
#  changed_when: namespace_patch.rc == 0

- name: Check for errored deploy pods
  shell: oc get pods --namespace {{ threescale_namespace }}  |  grep  "deploy" | grep "Failed" | cut -d " " -f 1
  register: errored_deploy_pods

- name: Delete errored deploy pods
  shell: oc delete pod --namespace {{ threescale_namespace }} {{ errored_deploy_pods.stdout }}
  when: errored_deploy_pods.stdout != ""

# setup for enabling wildcard route
- name: Allow router to accept wildcard routes
  shell: oc set env dc/router ROUTER_ALLOW_WILDCARD_ROUTES=true -n default
  when: enable_wildcard_route

- set_fact:
    threescale_wildcard_policy: "Subdomain"
  when: enable_wildcard_route

- name: "Setup pv-based storage"
  block:
    - name: "Check for pvc storage class: {{ threescale_pvc_rwx_storageclassname }}"
      shell: oc get storageclass {{ threescale_pvc_rwx_storageclassname }}
      register: storageclass_exists
      failed_when: storageclass_exists.stderr != '' and 'NotFound' not in storageclass_exists.stderr

    - set_fact:
        threescale_pvc_rwx_storageclassname: ""
      when: not storageclass_exists.rc == 0
  when: threescale_file_upload_storage == "filesystem"

- name: "Setup s3 storage"
  block:
    - name: Create tmp file for AWS Auth Secret
      template:
        src: "aws-auth-secret.yml.j2"
        dest: /tmp/aws-auth-secret.yaml

    - name:  Create AWS Auth Secret for S3 storage
      command: "oc create -f /tmp/master-access-token-secret.yaml -n {{ threescale_namespace }}"
      register: threescale_master_access_token_secret_exists
      failed_when: threescale_master_access_token_secret_exists.stderr != '' and 'already exists' not in threescale_master_access_token_secret_exists.stderr
      changed_when: threescale_master_access_token_secret_exists.rc == 0

    - name: Delete tmp file for AWS Auth Secret
      file:
        path: /tmp/aws-auth-secret.yaml
        state: absent
  when: threescale_file_upload_storage == "s3"

- name: Create 3Scale Operator resources
  shell: "oc create -f {{ item }} -n {{ threescale_namespace }}"
  with_items: "{{ threescale_operator_resource_items }}"
  register: create_3scale_operator_resource_cmd
  failed_when: create_3scale_operator_resource_cmd.stderr != '' and 'AlreadyExists' not in create_3scale_operator_resource_cmd.stderr

- name: Generate 3Scale Operator resource file
  template:
    src: "operator.yaml.j2"
    dest: /tmp/3scale-operator.yml

- name: Create 3Scale Operator resource
  shell: oc create -f /tmp/3scale-operator.yml -n {{ threescale_namespace }}
  register: create_3scale_operator_resource_cmd
  failed_when: create_3scale_operator_resource_cmd.stderr != '' and 'AlreadyExists' not in create_3scale_operator_resource_cmd.stderr
  changed_when: create_3scale_operator_resource_cmd.rc == 0

- name: Generate 3Scale custom resource template
  template:
    src: "apps_v1alpha1_apimanager_cr.yaml.j2"
    dest: /tmp/3scale-cr.yml

- name: Create 3Scale custom resource
  shell: oc create -f /tmp/3scale-cr.yml -n {{ threescale_namespace }}
  register: create_3scale_custom_resource_cmd
  failed_when: create_3scale_custom_resource_cmd.stderr != '' and 'AlreadyExists' not in create_3scale_custom_resource_cmd.stderr
  changed_when: create_3scale_custom_resource_cmd.rc == 0

#
#- import_tasks: resources.yml
#
- import_tasks: routes.yml
  when: not enable_wildcard_route

- name: "Verify 3Scale deployment succeeded"
  shell: sleep 5; oc get pods --namespace {{ threescale_namespace }}  |  grep  "deploy"
  register: result
  until: not result.stdout
  retries: 50
  delay: 10
  failed_when: result.stdout
  changed_when: False

#- import_tasks: sso.yml
#- import_tasks: access_token.yml
#- import_tasks: service_discovery.yml
#- import_tasks: users.yml
